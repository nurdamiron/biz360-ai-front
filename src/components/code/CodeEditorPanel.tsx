// src/components/code/CodeEditorPanel.tsx
import React, { useState } from 'react';
import {
  Box,
  Flex,
  Text,
  Button,
  Textarea,
  useColorModeValue,
  VStack,
  HStack,
  Divider,
  Badge,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  IconButton,
  Tooltip,
  useToast
} from '@chakra-ui/react';
import { CodeGeneration } from '../../types/task.types';
import { useAppDispatch } from '../../hooks/redux';
import { reviewCode } from '../../store/slices/tasksSlice';

// –ò–∫–æ–Ω–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ react-icons)
// –í —ç—Ç–æ–º —à–∞–±–ª–æ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
const CheckIcon = () => <span>‚úÖ</span>;
const XIcon = () => <span>‚ùå</span>;
const RefreshIcon = () => <span>üîÑ</span>;
const CommentIcon = () => <span>üí¨</span>;

interface CodeEditorPanelProps {
  codeGeneration: CodeGeneration;
  onRegenerate?: () => void;
}

const CodeEditorPanel: React.FC<CodeEditorPanelProps> = ({ 
  codeGeneration,
  onRegenerate 
}) => {
  const [activeTab, setActiveTab] = useState(0);
  const [feedback, setFeedback] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const dispatch = useAppDispatch();
  const toast = useToast();
  
  // –¶–≤–µ—Ç–∞
  const codeBg = useColorModeValue('gray.50', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.700');
  const diffAddedBg = useColorModeValue('green.50', 'green.900');
  const diffRemovedBg = useColorModeValue('red.50', 'red.900');
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const getStatusBadge = () => {
    const statusMap = {
      'pending': { color: 'blue', text: '–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏' },
      'approved': { color: 'green', text: '–û–¥–æ–±—Ä–µ–Ω–æ' },
      'rejected': { color: 'red', text: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ' },
    };
    
    const { color, text } = statusMap[codeGeneration.status] || 
      { color: 'gray', text: codeGeneration.status };
    
    return (
      <Badge colorScheme={color} borderRadius="full" px={2}>
        {text}
      </Badge>
    );
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞
  const handleApprove = async () => {
    setIsSubmitting(true);
    try {
      await dispatch(reviewCode({
        generationId: codeGeneration.id,
        status: 'approved',
        feedback
      })).unwrap();
      
      toast({
        title: '–ö–æ–¥ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        description: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã',
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        description: error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
  const handleReject = async () => {
    if (!feedback.trim()) {
      toast({
        title: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
        description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–¥–∞',
        status: 'warning',
        duration: 5000,
        isClosable: true,
      });
      return;
    }
    
    setIsSubmitting(true);
    try {
      await dispatch(reviewCode({
        generationId: codeGeneration.id,
        status: 'rejected',
        feedback
      })).unwrap();
      
      toast({
        title: '–ö–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω',
        description: '–í–∞—à –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        status: 'info',
        duration: 5000,
        isClosable: true,
      });
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è',
        description: error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
  const handleRegenerate = () => {
    if (onRegenerate) {
      onRegenerate();
    }
  };
  
  // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è diff-–≤–∏–¥–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É diff)
  const renderDiff = () => {
    if (!codeGeneration.originalCode) {
      return (
        <Box p={4} textAlign="center">
          <Text color="gray.500">–≠—Ç–æ—Ç –∫–æ–¥ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –Ω—É–ª—è, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</Text>
        </Box>
      );
    }
    
    // –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è diff (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ UI)
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É diff
    return (
      <VStack spacing={1} align="stretch">
        <Box p={2} bg={diffRemovedBg} borderRadius="md">
          <Text fontFamily="mono" fontSize="sm" color="red.600">- –£–¥–∞–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞</Text>
        </Box>
        <Box p={2} bg={diffAddedBg} borderRadius="md">
          <Text fontFamily="mono" fontSize="sm" color="green.600">+ –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞</Text>
        </Box>
        <Text fontSize="sm" p={2} color="gray.500">
          (–≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π diff)
        </Text>
      </VStack>
    );
  };
  
  return (
    <Box
      borderWidth="1px"
      borderRadius="lg"
      borderColor={borderColor}
      boxShadow="sm"
      overflow="hidden"
      width="100%"
    >
      <Flex 
        p={4} 
        justifyContent="space-between" 
        alignItems="center"
        borderBottomWidth="1px"
        borderBottomColor={borderColor}
      >
        <VStack align="flex-start" spacing={1}>
          <Text fontWeight="bold" fontSize="md">
            {codeGeneration.filePath}
          </Text>
          <HStack>
            {getStatusBadge()}
            <Text fontSize="sm" color="gray.500">
              –°–æ–∑–¥–∞–Ω: {new Date(codeGeneration.createdAt).toLocaleString()}
            </Text>
          </HStack>
        </VStack>
        
        <HStack spacing={2}>
          {codeGeneration.status === 'pending' && (
            <>
              <Tooltip label="–£—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥">
                <IconButton
                  aria-label="Approve code"
                  icon={<CheckIcon />}
                  colorScheme="green"
                  size="sm"
                  onClick={handleApprove}
                  isLoading={isSubmitting}
                />
              </Tooltip>
              
              <Tooltip label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–æ–¥">
                <IconButton
                  aria-label="Reject code"
                  icon={<XIcon />}
                  colorScheme="red"
                  size="sm"
                  onClick={handleReject}
                  isLoading={isSubmitting}
                />
              </Tooltip>
            </>
          )}
          
          <Tooltip label="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é">
            <IconButton
              aria-label="Regenerate code"
              icon={<RefreshIcon />}
              size="sm"
              onClick={handleRegenerate}
              isDisabled={isSubmitting}
            />
          </Tooltip>
        </HStack>
      </Flex>
      
      <Tabs variant="enclosed" index={activeTab} onChange={setActiveTab}>
        <TabList>
          <Tab>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥</Tab>
          <Tab>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥</Tab>
          <Tab>–ò–∑–º–µ–Ω–µ–Ω–∏—è (diff)</Tab>
          <Tab>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</Tab>
        </TabList>
        
        <TabPanels>
          <TabPanel>
            <Box
              p={4}
              bg={codeBg}
              borderRadius="md"
              fontFamily="mono"
              fontSize="sm"
              whiteSpace="pre-wrap"
              overflowX="auto"
              height="400px"
            >
              {codeGeneration.generatedCode || '–ö–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
            </Box>
          </TabPanel>
          
          <TabPanel>
            <Box
              p={4}
              bg={codeBg}
              borderRadius="md"
              fontFamily="mono"
              fontSize="sm"
              whiteSpace="pre-wrap"
              overflowX="auto"
              height="400px"
            >
              {codeGeneration.originalCode || '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
            </Box>
          </TabPanel>
          
          <TabPanel>
            <Box p={4} bg={codeBg} borderRadius="md" height="400px" overflowY="auto">
              {renderDiff()}
            </Box>
          </TabPanel>
          
          <TabPanel>
            <VStack spacing={4} align="stretch">
              <Textarea
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –∫–æ–¥—É..."
                height="340px"
                value={feedback}
                onChange={(e) => setFeedback(e.target.value)}
                isDisabled={codeGeneration.status !== 'pending'}
              />
              
              {codeGeneration.feedback && (
                <Box p={4} bg={codeBg} borderRadius="md">
                  <Text fontWeight="bold" mb={2}>–ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</Text>
                  <Text whiteSpace="pre-wrap">{codeGeneration.feedback}</Text>
                </Box>
              )}
            </VStack>
          </TabPanel>
        </TabPanels>
      </Tabs>
    </Box>
  );
};

export default CodeEditorPanel;