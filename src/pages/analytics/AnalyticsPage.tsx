// src/pages/analytics/AnalyticsPage.tsx
import React, { useEffect, useState } from 'react';
import {
  Box,
  Heading,
  Text,
  SimpleGrid,
  Flex,
  VStack,
  HStack,
  Button,
  Select,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  FormControl,
  FormLabel,
  useColorModeValue,
  Spinner,
  Card,
  CardBody,
  Badge,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  IconButton,
  useToast
} from '@chakra-ui/react';
import { useAppDispatch, useAppSelector } from '../../hooks/redux';
import {
  fetchTasksStatusDistribution,
  fetchTasksPriorityDistribution,
  fetchTasksCompletionTimeline,
  fetchTasksPerformanceTimeline,
  fetchUserActivityStats,
  fetchProjectStats,
  AnalyticsFilterParams,
  toBarChartData,
  toPieChartData,
  toLineChartData
} from '../../store/slices/analyticsSlice';
import LineChart, { DataPoint } from '../../components/analytics/LineChart';
import BarChart from '../../components/analytics/BarChart';
import PieChart from '../../components/analytics/PieChart';
import { Project } from '../../store/slices/projectsSlice';
import { fetchProjects } from '../../store/slices/projectsSlice';

// –ò–∫–æ–Ω–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ react-icons)
// –í —ç—Ç–æ–º —à–∞–±–ª–æ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
const FilterIcon = () => <span>üîé</span>;
const RefreshIcon = () => <span>üîÑ</span>;
const DownloadIcon = () => <span>‚¨áÔ∏è</span>;
const PrintIcon = () => <span>üñ®Ô∏è</span>;

const AnalyticsPage: React.FC = () => {
  const dispatch = useAppDispatch();
  const toast = useToast();
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redux
  const {
    tasksStatusDistribution,
    tasksPriorityDistribution,
    tasksCompletionTimeline,
    tasksPerformanceTimeline,
    userActivityStats,
    projectStats,
    isLoading
  } = useAppSelector(state => state.analytics);
  
  const { projects } = useAppSelector(state => state.projects);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [filters, setFilters] = useState<AnalyticsFilterParams>({});
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  const [timeRange, setTimeRange] = useState('30days'); // '7days', '30days', '90days', 'year'
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  const [selectedProject, setSelectedProject] = useState<number | undefined>(undefined);
  
  // –¶–≤–µ—Ç–∞
  const borderColor = useColorModeValue('gray.200', 'gray.700');
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const statusDistributionData = toPieChartData(
    tasksStatusDistribution.map(item => ({
      label: getStatusLabel(item.status),
      value: item.count
    }))
  );
  
  const priorityDistributionData = toPieChartData(
    tasksPriorityDistribution.map(item => ({
      label: getPriorityLabel(item.priority),
      value: item.count
    }))
  );
  
  const completionTimelineData = {
    created: toLineChartData(
      tasksCompletionTimeline.map(item => ({
        date: item.date,
        value: item.created
      }))
    ),
    completed: toLineChartData(
      tasksCompletionTimeline.map(item => ({
        date: item.date,
        value: item.completed
      }))
    )
  };
  
  const performanceTimelineData = {
    estimated: toLineChartData(
      tasksPerformanceTimeline.map(item => ({
        date: item.date,
        value: item.estimatedTime
      }))
    ),
    actual: toLineChartData(
      tasksPerformanceTimeline.map(item => ({
        date: item.date,
        value: item.actualTime
      }))
    )
  };
  
  const userActivityData = toBarChartData(
    userActivityStats.map(item => ({
      label: item.user.name,
      value: item.tasksCompleted
    }))
  );
  
  const projectStatsData = toBarChartData(
    projectStats.map(item => ({
      label: item.name,
      value: item.completionRate
    }))
  );
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ –¥–∞—Ç—ã
    let startDate: string | undefined;
    const now = new Date();
    
    switch (timeRange) {
      case '7days':
        startDate = new Date(now.setDate(now.getDate() - 7)).toISOString().split('T')[0];
        break;
      case '30days':
        startDate = new Date(now.setDate(now.getDate() - 30)).toISOString().split('T')[0];
        break;
      case '90days':
        startDate = new Date(now.setDate(now.getDate() - 90)).toISOString().split('T')[0];
        break;
      case 'year':
        startDate = new Date(now.setFullYear(now.getFullYear() - 1)).toISOString().split('T')[0];
        break;
      default:
        startDate = undefined;
    }
    
    const filterParams: AnalyticsFilterParams = {
      ...filters,
      startDate,
      projectId: selectedProject
    };
    
    dispatch(fetchTasksStatusDistribution(filterParams));
    dispatch(fetchTasksPriorityDistribution(filterParams));
    dispatch(fetchTasksCompletionTimeline(filterParams));
    dispatch(fetchTasksPerformanceTimeline(filterParams));
    dispatch(fetchUserActivityStats(filterParams));
    dispatch(fetchProjectStats(filterParams));
    
    // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    if (projects.length === 0) {
      dispatch(fetchProjects());
    }
  }, [dispatch, filters, timeRange, selectedProject, projects.length]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  function getStatusLabel(status: string): string {
    switch (status) {
      case 'new': return '–ù–æ–≤—ã–µ';
      case 'pending': return '–û–∂–∏–¥–∞—é—â–∏–µ';
      case 'in_progress': return '–í —Ä–∞–±–æ—Ç–µ';
      case 'resolved': return '–†–µ—à–µ–Ω—ã';
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω—ã';
      case 'failed': return '–û—à–∏–±–∫–∞';
      case 'canceled': return '–û—Ç–º–µ–Ω–µ–Ω—ã';
      default: return status;
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  function getPriorityLabel(priority: string): string {
    switch (priority) {
      case 'low': return '–ù–∏–∑–∫–∏–π';
      case 'medium': return '–°—Ä–µ–¥–Ω–∏–π';
      case 'high': return '–í—ã—Å–æ–∫–∏–π';
      case 'critical': return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π';
      default: return priority;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  const handleTimeRangeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setTimeRange(e.target.value);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  const handleProjectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    setSelectedProject(value ? Number(value) : undefined);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleResetFilters = () => {
    setTimeRange('30days');
    setSelectedProject(undefined);
    setFilters({});
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)
  const handleExport = () => {
    toast({
      title: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
      description: '–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏',
      status: 'info',
      duration: 3000,
      isClosable: true,
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏ –æ—Ç—á–µ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
  const handlePrint = () => {
    toast({
      title: '–ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞',
      description: '–§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ –æ—Ç—á–µ—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏',
      status: 'info',
      duration: 3000,
      isClosable: true,
    });
  };
  
  return (
    <Box>
      <Flex justifyContent="space-between" alignItems="center" mb={6}>
        <VStack align="flex-start" spacing={1}>
          <Heading size="lg">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</Heading>
          <Text color="gray.500">
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
          </Text>
        </VStack>
        
        <HStack spacing={2}>
          <Button 
            leftIcon={<RefreshIcon />} 
            variant="outline" 
            onClick={() => {
              // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
              const filterParams: AnalyticsFilterParams = {
                ...filters,
                projectId: selectedProject
              };
              
              dispatch(fetchTasksStatusDistribution(filterParams));
              dispatch(fetchTasksPriorityDistribution(filterParams));
              dispatch(fetchTasksCompletionTimeline(filterParams));
              dispatch(fetchTasksPerformanceTimeline(filterParams));
              dispatch(fetchUserActivityStats(filterParams));
              dispatch(fetchProjectStats(filterParams));
            }}
            isLoading={isLoading}
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
          
          <Menu>
            <MenuButton
              as={Button}
              leftIcon={<DownloadIcon />}
              variant="outline"
            >
              –≠–∫—Å–ø–æ—Ä—Ç
            </MenuButton>
            <MenuList>
              <MenuItem onClick={handleExport}>–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV</MenuItem>
              <MenuItem onClick={handleExport}>–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel</MenuItem>
              <MenuItem onClick={handleExport}>–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF</MenuItem>
              <MenuItem onClick={handlePrint} icon={<PrintIcon />}>–ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞</MenuItem>
            </MenuList>
          </Menu>
        </HStack>
      </Flex>
      
      <Card borderColor={borderColor} boxShadow="sm" mb={6}>
        <CardBody>
          <Flex 
            direction={{ base: 'column', md: 'row' }} 
            justify="space-between" 
            align={{ base: 'stretch', md: 'center' }}
            gap={4}
          >
            <HStack spacing={4}>
              <FormControl width="auto">
                <FormLabel fontSize="sm">–ü–µ—Ä–∏–æ–¥</FormLabel>
                <Select 
                  value={timeRange} 
                  onChange={handleTimeRangeChange}
                  size="sm"
                >
                  <option value="7days">–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</option>
                  <option value="30days">–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π</option>
                  <option value="90days">–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π</option>
                  <option value="year">–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥</option>
                </Select>
              </FormControl>
              
              <FormControl width="auto">
                <FormLabel fontSize="sm">–ü—Ä–æ–µ–∫—Ç</FormLabel>
                <Select 
                  value={selectedProject || ''} 
                  onChange={handleProjectChange}
                  size="sm"
                  placeholder="–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
                >
                  {projects.map(project => (
                    <option key={project.id} value={project.id}>
                      {project.name}
                    </option>
                  ))}
                </Select>
              </FormControl>
            </HStack>
            
            <Button 
              size="sm" 
              variant="ghost" 
              onClick={handleResetFilters}
            >
              –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </Button>
          </Flex>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
          {(selectedProject !== undefined) && (
            <Flex wrap="wrap" gap={2} mt={4}>
              {selectedProject !== undefined && (
                <Badge colorScheme="purple" borderRadius="full" px={2} py={1}>
                  –ü—Ä–æ–µ–∫—Ç: {projects.find(p => p.id === selectedProject)?.name || selectedProject}
                </Badge>
              )}
              
              <Badge colorScheme="blue" borderRadius="full" px={2} py={1}>
                –ü–µ—Ä–∏–æ–¥: {
                  timeRange === '7days' ? '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π' :
                  timeRange === '30days' ? '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π' :
                  timeRange === '90days' ? '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π' :
                  '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥'
                }
              </Badge>
            </Flex>
          )}
        </CardBody>
      </Card>
      
      <Tabs variant="enclosed" colorScheme="blue" isLazy>
        <TabList>
          <Tab>–û–±–∑–æ—Ä</Tab>
          <Tab>–ó–∞–¥–∞—á–∏</Tab>
          <Tab>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</Tab>
          <Tab>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</Tab>
          <Tab>–ü—Ä–æ–µ–∫—Ç—ã</Tab>
        </TabList>
        
        <TabPanels>
          {/* –ü–∞–Ω–µ–ª—å –æ–±–∑–æ—Ä–∞ */}
          <TabPanel p={4}>
            {isLoading ? (
              <Flex justify="center" align="center" p={10}>
                <Spinner size="xl" />
              </Flex>
            ) : (
              <Box>
                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6} mb={6}>
                  <LineChart 
                    title="–°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á"
                    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –¥–Ω—è–º"
                    data={completionTimelineData.created}
                    height={300}
                    color="blue.500"
                  />
                  
                  <LineChart 
                    title="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
                    description="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                    data={performanceTimelineData.actual}
                    height={300}
                    color="green.500"
                    valueSuffix=" –º–∏–Ω."
                  />
                </SimpleGrid>
                
                <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>
                  <PieChart 
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á"
                    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ç—É—Å–µ"
                    data={statusDistributionData}
                    size={250}
                    showLegend={true}
                    donut={true}
                  />
                  
                  <PieChart 
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"
                    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"
                    data={priorityDistributionData}
                    size={250}
                    showLegend={true}
                    donut={true}
                    colorScheme={['#E53E3E', '#ED8936', '#3182CE', '#718096']}
                  />
                  
                  <BarChart 
                    title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
                    data={userActivityData.slice(0, 5)}
                    height={250}
                    horizontal={true}
                  />
                </SimpleGrid>
              </Box>
            )}
          </TabPanel>
          
          {/* –ü–∞–Ω–µ–ª—å –∑–∞–¥–∞—á */}
          <TabPanel p={4}>
            {isLoading ? (
              <Flex justify="center" align="center" p={10}>
                <Spinner size="xl" />
              </Flex>
            ) : (
              <Box>
                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6} mb={6}>
                  <LineChart 
                    title="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á"
                    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –¥–Ω—è–º"
                    data={completionTimelineData.created}
                    height={300}
                    color="blue.500"
                  />
                  
                  <LineChart 
                    title="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á"
                    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –¥–Ω—è–º"
                    data={completionTimelineData.completed}
                    height={300}
                    color="green.500"
                  />
                </SimpleGrid>
                
                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
                  <PieChart 
                    title="–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á"
                    description="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"
                    data={statusDistributionData}
                    showLegend={true}
                  />
                  
                  <PieChart 
                    title="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á"
                    description="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"
                    data={priorityDistributionData}
                    showLegend={true}
                    colorScheme={['#E53E3E', '#ED8936', '#3182CE', '#718096']}
                  />
                </SimpleGrid>
              </Box>
            )}
          </TabPanel>
          
          {/* –ü–∞–Ω–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
          <TabPanel p={4}>
            {isLoading ? (
              <Flex justify="center" align="center" p={10}>
                <Spinner size="xl" />
              </Flex>
            ) : (
              <Box>
                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6} mb={6}>
                  <LineChart 
                    title="–ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è"
                    description="–ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –¥–Ω—è–º (–º–∏–Ω.)"
                    data={performanceTimelineData.estimated}
                    height={300}
                    color="blue.500"
                    valueSuffix=" –º–∏–Ω."
                  />
                  
                  <LineChart 
                    title="–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è"
                    description="–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –¥–Ω—è–º (–º–∏–Ω.)"
                    data={performanceTimelineData.actual}
                    height={300}
                    color="green.500"
                    valueSuffix=" –º–∏–Ω."
                  />
                </SimpleGrid>
                
                <Card p={4} borderColor={borderColor} boxShadow="sm">
                  <Heading size="md" mb={4}>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞</Heading>
                  
                  <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6}>
                    <Flex 
                      direction="column" 
                      alignItems="center" 
                      justifyContent="center" 
                      p={4} 
                      bg={useColorModeValue('blue.50', 'blue.900')}
                      borderRadius="md"
                    >
                      <Text fontSize="sm" color="gray.500">–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å</Text>
                      <Text fontSize="2xl" fontWeight="bold">87%</Text>
                      <Badge colorScheme="green">–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ</Badge>
                    </Flex>
                    
                    <Flex 
                      direction="column" 
                      alignItems="center" 
                      justifyContent="center" 
                      p={4} 
                      bg={useColorModeValue('green.50', 'green.900')}
                      borderRadius="md"
                    >
                      <Text fontSize="sm" color="gray.500">–¢–æ—á–Ω–æ—Å—Ç—å –∫–æ–¥–∞</Text>
                      <Text fontSize="2xl" fontWeight="bold">92%</Text>
                      <Badge colorScheme="green">–û—Ç–ª–∏—á–Ω–æ</Badge>
                    </Flex>
                    
                    <Flex 
                      direction="column" 
                      alignItems="center" 
                      justifyContent="center" 
                      p={4} 
                      bg={useColorModeValue('purple.50', 'purple.900')}
                      borderRadius="md"
                    >
                      <Text fontSize="sm" color="gray.500">–£—Å–ø–µ—à–Ω—ã–µ PR</Text>
                      <Text fontSize="2xl" fontWeight="bold">78%</Text>
                      <Badge colorScheme="blue">–•–æ—Ä–æ—à–æ</Badge>
                    </Flex>
                    
                    <Flex 
                      direction="column" 
                      alignItems="center" 
                      justifyContent="center" 
                      p={4} 
                      bg={useColorModeValue('orange.50', 'orange.900')}
                      borderRadius="md"
                    >
                      <Text fontSize="sm" color="gray.500">–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏</Text>
                      <Text fontSize="2xl" fontWeight="bold">67%</Text>
                      <Badge colorScheme="orange">–°—Ä–µ–¥–Ω–µ</Badge>
                    </Flex>
                  </SimpleGrid>
                </Card>
              </Box>
            )}
          </TabPanel>
          
          {/* –ü–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          <TabPanel p={4}>
            {isLoading ? (
              <Flex justify="center" align="center" p={10}>
                <Spinner size="xl" />
              </Flex>
            ) : (
              <Box>
                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6} mb={6}>
                  <BarChart 
                    title="–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
                    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
                    data={userActivityStats.map(user => ({
                      label: user.user.name,
                      value: user.tasksCreated
                    }))}
                    height={300}
                    horizontal={true}
                  />
                  
                  <BarChart 
                    title="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
                    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
                    data={userActivityStats.map(user => ({
                      label: user.user.name,
                      value: user.tasksCompleted
                    }))}
                    height={300}
                    horizontal={true}
                  />
                </SimpleGrid>
                
                <Card p={4} borderColor={borderColor} boxShadow="sm">
                  <Heading size="md" mb={4}>–õ–∏–¥–µ—Ä—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</Heading>
                  
                  <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6}>
                    {userActivityStats.slice(0, 3).map((user, index) => (
                      <Card key={user.user.id} p={4} variant="outline">
                        <VStack spacing={2} align="center">
                          <Badge colorScheme={index === 0 ? 'yellow' : index === 1 ? 'gray' : 'orange'} fontSize="lg" p={2} borderRadius="full">
                            #{index + 1}
                          </Badge>
                          <Text fontWeight="bold">{user.user.name}</Text>
                          <HStack divider={<Text mx={2}>|</Text>}>
                            <VStack spacing={0}>
                              <Text fontSize="sm" color="gray.500">–ó–∞–¥–∞—á–∏</Text>
                              <Text fontWeight="medium">{user.tasksCompleted}</Text>
                            </VStack>
                            <VStack spacing={0}>
                              <Text fontSize="sm" color="gray.500">–ö–æ–¥</Text>
                              <Text fontWeight="medium">{user.codeReviewed}</Text>
                            </VStack>
                          </HStack>
                        </VStack>
                      </Card>
                    ))}
                  </SimpleGrid>
                </Card>
              </Box>
            )}
          </TabPanel>
          
          {/* –ü–∞–Ω–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
          <TabPanel p={4}>
            {isLoading ? (
              <Flex justify="center" align="center" p={10}>
                <Spinner size="xl" />
              </Flex>
            ) : (
              <Box>
                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6} mb={6}>
                  <BarChart 
                    title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á"
                    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"
                    data={projectStats.map(project => ({
                      label: project.name,
                      value: project.tasksCount
                    }))}
                    height={300}
                    horizontal={true}
                  />
                  
                  <BarChart 
                    title="–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                    description="–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"
                    data={projectStats.map(project => ({
                      label: project.name,
                      value: project.completionRate
                    }))}
                    height={300}
                    horizontal={true}
                    valueSuffix="%"
                    maxValue={100}
                    defaultColor="green.500"
                  />
                </SimpleGrid>
                
                <Card p={4} borderColor={borderColor} boxShadow="sm">
                  <Heading size="md" mb={4}>–¢–æ–ø –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</Heading>
                  
                  <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6}>
                    {projectStats
                      .sort((a, b) => b.completionRate - a.completionRate)
                      .slice(0, 4)
                      .map(project => (
                        <Card key={project.id} p={4} variant="outline">
                          <VStack spacing={2} align="stretch">
                            <Text fontWeight="bold" isTruncated>{project.name}</Text>
                            <Text color="gray.500" fontSize="sm">{project.tasksCount} –∑–∞–¥–∞—á</Text>
                            <HStack>
                              <Text fontWeight="medium">{project.completionRate}%</Text>
                              <Box flex="1">
                                <Box 
                                  w="100%" 
                                  h="6px" 
                                  bg="gray.100" 
                                  borderRadius="full"
                                  overflow="hidden"
                                >
                                  <Box 
                                    w={`${project.completionRate}%`} 
                                    h="100%" 
                                    bg={
                                      project.completionRate > 75 ? 'green.500' :
                                      project.completionRate > 50 ? 'blue.500' :
                                      project.completionRate > 25 ? 'orange.500' :
                                      'red.500'
                                    }
                                  />
                                </Box>
                              </Box>
                            </HStack>
                          </VStack>
                        </Card>
                      ))}
                  </SimpleGrid>
                </Card>
              </Box>
            )}
          </TabPanel>
        </TabPanels>
      </Tabs>
    </Box>
  );
};

export default AnalyticsPage;