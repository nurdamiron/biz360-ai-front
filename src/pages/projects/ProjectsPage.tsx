// src/pages/projects/ProjectsPage.tsx
import React, { useEffect, useState } from 'react';
import {
  Box,
  Heading,
  Text,
  Button,
  SimpleGrid,
  Input,
  InputGroup,
  InputLeftElement,
  Flex,
  Select,
  VStack,
  HStack,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  FormControl,
  FormLabel,
  Textarea,
  Spinner,
  useToast,
  FormErrorMessage,
  Badge,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  IconButton,
  useColorModeValue,
  Card,
  CardBody,
} from '@chakra-ui/react';
import { useNavigate } from 'react-router-dom';
import { useAppDispatch, useAppSelector } from '../../hooks/redux';
import { 
  fetchProjects, 
  createProject, 
  ProjectFilterParams 
} from '../../store/slices/projectsSlice';
import ProjectCard from '../../components/project/ProjectCard';

// –ò–∫–æ–Ω–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ react-icons)
// –í —ç—Ç–æ–º —à–∞–±–ª–æ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
const AddIcon = () => <span>‚ûï</span>;
const SearchIcon = () => <span>üîç</span>;
const FilterIcon = () => <span>üîé</span>;

const ProjectsPage: React.FC = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const { projects, isLoading } = useAppSelector(state => state.projects);
  const toast = useToast();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [filters, setFilters] = useState<ProjectFilterParams>({
    page: 1,
    limit: 10,
    sortBy: 'updatedAt',
    sortOrder: 'desc'
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const [searchTerm, setSearchTerm] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const [statusFilter, setStatusFilter] = useState<string>('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  const [newProject, setNewProject] = useState({
    name: '',
    description: ''
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const [validationErrors, setValidationErrors] = useState({
    name: '',
    description: ''
  });
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  const { isOpen, onOpen, onClose } = useDisclosure();
  
  // –¶–≤–µ—Ç–∞
  const borderColor = useColorModeValue('gray.200', 'gray.700');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    const queryParams: ProjectFilterParams = { ...filters };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (searchTerm.trim()) {
      queryParams.search = searchTerm.trim();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
    if (statusFilter) {
      queryParams.status = statusFilter;
    }
    
    dispatch(fetchProjects(queryParams));
  }, [dispatch, filters, searchTerm, statusFilter]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSortChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–µ –∏ –ø–æ—Ä—è–¥–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "updatedAt_desc")
    const [sortBy, sortOrder] = value.split('_');
    
    setFilters({
      ...filters,
      sortBy,
      sortOrder: sortOrder as 'asc' | 'desc',
      page: 1  // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const handleLimitChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilters({
      ...filters,
      limit: Number(e.target.value),
      page: 1  // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∏—Å–∫–∞
  const handleSearchSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ useEffect
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const handleStatusFilterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setStatusFilter(e.target.value);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleResetFilters = () => {
    setSearchTerm('');
    setStatusFilter('');
    setFilters({
      page: 1,
      limit: 10,
      sortBy: 'updatedAt',
      sortOrder: 'desc'
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  const handleCreateProject = async () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = {
      name: '',
      description: ''
    };
    
    if (!newProject.name.trim()) {
      errors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    
    if (!newProject.description.trim()) {
      errors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    
    if (errors.name || errors.description) {
      setValidationErrors(errors);
      return;
    }
    
    try {
      const result = await dispatch(createProject(newProject)).unwrap();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      onClose();
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setNewProject({
        name: '',
        description: ''
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      setValidationErrors({
        name: '',
        description: ''
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
      toast({
        title: '–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω',
        description: `–ü—Ä–æ–µ–∫—Ç "${result.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`,
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
      
      // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–µ—Ç–∞–ª—è–º–∏
      if (result?.id) {
        navigate(`/projects/${result.id}`);
      }
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
  const handleViewProject = (id: number) => {
    navigate(`/projects/${id}`);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
  const handleEditProject = (id: number) => {
    toast({
      title: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
      description: `–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ #${id} –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏`,
      status: 'info',
      duration: 3000,
      isClosable: true,
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
  const handleDeleteProject = (id: number) => {
    toast({
      title: '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
      description: `–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ #${id} –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏`,
      status: 'info',
      duration: 3000,
      isClosable: true,
    });
  };
  
  return (
    <Box>
      <Flex justifyContent="space-between" alignItems="center" mb={6}>
        <VStack align="flex-start" spacing={1}>
          <Heading size="lg">–ü—Ä–æ–µ–∫—Ç—ã</Heading>
          <Text color="gray.500">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –¥–ª—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
          </Text>
        </VStack>
        
        <Button 
          leftIcon={<AddIcon />} 
          colorScheme="blue" 
          onClick={onOpen}
        >
          –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        </Button>
      </Flex>
      
      <Card borderColor={borderColor} boxShadow="sm" mb={6}>
        <CardBody>
          <Flex 
            direction={{ base: 'column', md: 'row' }} 
            justify="space-between" 
            align={{ base: 'stretch', md: 'center' }}
            gap={4}
          >
            <form onSubmit={handleSearchSubmit} style={{ flex: 1 }}>
              <InputGroup>
                <InputLeftElement pointerEvents="none">
                  <SearchIcon />
                </InputLeftElement>
                <Input 
                  placeholder="–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤..." 
                  value={searchTerm}
                  onChange={handleSearchChange}
                />
              </InputGroup>
            </form>
            
            <HStack spacing={2}>
              <Select 
                width="auto" 
                size="md" 
                value={statusFilter}
                onChange={handleStatusFilterChange}
                placeholder="–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã"
              >
                <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
                <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
                <option value="archived">–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
              </Select>
              
              <Select 
                width="auto" 
                size="md" 
                value={`${filters.sortBy}_${filters.sortOrder}`}
                onChange={handleSortChange}
              >
                <option value="updatedAt_desc">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</option>
                <option value="createdAt_desc">–ù–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏</option>
                <option value="createdAt_asc">–°—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏</option>
                <option value="name_asc">–ü–æ –∏–º–µ–Ω–∏ (–ê-–Ø)</option>
                <option value="name_desc">–ü–æ –∏–º–µ–Ω–∏ (–Ø-–ê)</option>
              </Select>
              
              <Select 
                width="auto" 
                size="md" 
                value={filters.limit.toString()}
                onChange={handleLimitChange}
              >
                <option value="5">5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option>
                <option value="10">10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option>
                <option value="20">20 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option>
                <option value="50">50 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option>
              </Select>
            </HStack>
          </Flex>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
          {(statusFilter || searchTerm) && (
            <Flex wrap="wrap" gap={2} mt={4}>
              {searchTerm && (
                <Badge colorScheme="blue" borderRadius="full" px={2} py={1}>
                  –ü–æ–∏—Å–∫: {searchTerm}
                </Badge>
              )}
              
              {statusFilter && (
                <Badge colorScheme="purple" borderRadius="full" px={2} py={1}>
                  –°—Ç–∞—Ç—É—Å: {statusFilter}
                </Badge>
              )}
              
              <Button 
                size="xs" 
                variant="ghost" 
                onClick={handleResetFilters}
              >
                –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ
              </Button>
            </Flex>
          )}
        </CardBody>
      </Card>
      
      {isLoading ? (
        <Flex justify="center" align="center" p={10}>
          <Spinner size="xl" />
        </Flex>
      ) : projects.length > 0 ? (
        <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>
          {projects.map(project => (
            <ProjectCard 
              key={project.id} 
              project={project} 
              onView={handleViewProject}
              onEdit={handleEditProject}
              onDelete={handleDeleteProject}
            />
          ))}
        </SimpleGrid>
      ) : (
        <Box p={10} textAlign="center">
          <Text fontSize="lg" color="gray.500">
            –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </Text>
          <Text color="gray.500" mt={2}>
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
          </Text>
          <Button 
            mt={4} 
            colorScheme="blue" 
            leftIcon={<AddIcon />} 
            onClick={onOpen}
          >
            –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
          </Button>
        </Box>
      )}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ */}
      <Modal isOpen={isOpen} onClose={onClose} size="lg">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <VStack spacing={4}>
              <FormControl isRequired isInvalid={!!validationErrors.name}>
                <FormLabel>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</FormLabel>
                <Input 
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" 
                  value={newProject.name}
                  onChange={(e) => setNewProject({...newProject, name: e.target.value})}
                />
                {validationErrors.name && (
                  <FormErrorMessage>{validationErrors.name}</FormErrorMessage>
                )}
              </FormControl>
              
              <FormControl isRequired isInvalid={!!validationErrors.description}>
                <FormLabel>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</FormLabel>
                <Textarea 
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..." 
                  rows={5}
                  value={newProject.description}
                  onChange={(e) => setNewProject({...newProject, description: e.target.value})}
                />
                {validationErrors.description && (
                  <FormErrorMessage>{validationErrors.description}</FormErrorMessage>
                )}
              </FormControl>
            </VStack>
          </ModalBody>
          
          <ModalFooter>
            <Button variant="ghost" mr={3} onClick={onClose}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button colorScheme="blue" onClick={handleCreateProject}>
              –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </Box>
  );
};

export default ProjectsPage;