// src/pages/settings/SettingsPage.tsx
import React, { useState } from 'react';
import {
  Box,
  Heading,
  Text,
  Flex,
  VStack,
  HStack,
  SimpleGrid,
  Button,
  FormControl,
  FormLabel,
  FormHelperText,
  Input,
  Select,
  Switch,
  Divider,
  Badge,
  useToast,
  useColorMode,
  useColorModeValue,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Card,
  CardBody,
  IconButton,
  Avatar,
  Code,
  Slider,
  SliderTrack,
  SliderFilledTrack,
  SliderThumb,
  SliderMark,
  Tooltip,
  Radio,
  RadioGroup,
  Stack
} from '@chakra-ui/react';
import { useAppSelector } from '../../hooks/redux';
import { Environment, getCurrentEnvironment, setEnvironment } from '../../config/api.config';

// –ò–∫–æ–Ω–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ react-icons)
// –í —ç—Ç–æ–º —à–∞–±–ª–æ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
const SaveIcon = () => <span>üíæ</span>;
const ResetIcon = () => <span>üîÑ</span>;
const EditIcon = () => <span>‚úèÔ∏è</span>;
const UserIcon = () => <span>üë§</span>;
const LockIcon = () => <span>üîí</span>;
const BellIcon = () => <span>üîî</span>;
const ThemeIcon = () => <span>üé®</span>;
const CodeIcon = () => <span>üíª</span>;
const NetworkIcon = () => <span>üåê</span>;
const HistoryIcon = () => <span>‚è±Ô∏è</span>;

const SettingsPage: React.FC = () => {
  const toast = useToast();
  const { colorMode, toggleColorMode } = useColorMode();
  const { user } = useAppSelector(state => state.auth);
  
  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const [environment, setCurrentEnvironment] = useState<Environment>(getCurrentEnvironment());
  const [isLimitTokens, setIsLimitTokens] = useState(true);
  const [maxTokensPerRequest, setMaxTokensPerRequest] = useState(4000);
  const [showSliderValue, setShowSliderValue] = useState(false);
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const [userSettings, setUserSettings] = useState({
    notificationsEnabled: true,
    emailNotifications: false,
    autoSaveEnabled: true,
    codeReviewLevel: 'balanced',
    aiModel: 'claude-3.5-sonnet',
    language: 'ru'
  });
  
  // –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const [systemSettings, setSystemSettings] = useState({
    autoUpdateEnabled: true,
    debugMode: false,
    saveLogs: true,
    backupFrequency: 'daily',
    tokenLimitPerDay: 1000000,
    maxConcurrentRequests: 5
  });
  
  // –¶–≤–µ—Ç–∞
  const borderColor = useColorModeValue('gray.200', 'gray.700');
  const cardBg = useColorModeValue('white', 'gray.800');
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const handleEnvironmentChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newEnv = e.target.value as Environment;
    setCurrentEnvironment(newEnv);
    setEnvironment(newEnv);
    
    toast({
      title: '–û–∫—Ä—É–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ',
      description: `–¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: ${newEnv === Environment.LOCAL ? '–õ–æ–∫–∞–ª—å–Ω–æ–µ' : '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ'}`,
      status: 'info',
      duration: 3000,
      isClosable: true,
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleSaveUserSettings = () => {
    toast({
      title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      description: '–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      status: 'success',
      duration: 3000,
      isClosable: true,
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const handleSaveSystemSettings = () => {
    toast({
      title: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      description: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      status: 'success',
      duration: 3000,
      isClosable: true,
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const handleResetSettings = () => {
    toast({
      title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã',
      description: '–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
      status: 'info',
      duration: 3000,
      isClosable: true,
    });
  };
  
  return (
    <Box>
      <Flex justifyContent="space-between" alignItems="center" mb={6}>
        <VStack align="flex-start" spacing={1}>
          <Heading size="lg">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</Heading>
          <Text color="gray.500">
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
          </Text>
        </VStack>
        
        <HStack spacing={2}>
          <Button 
            leftIcon={<SaveIcon />} 
            colorScheme="blue" 
            onClick={handleSaveUserSettings}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
          </Button>
          
          <Button 
            leftIcon={<ResetIcon />} 
            variant="outline" 
            onClick={handleResetSettings}
          >
            –°–±—Ä–æ—Å–∏—Ç—å
          </Button>
        </HStack>
      </Flex>
      
      <Tabs variant="enclosed" colorScheme="blue" isLazy>
        <TabList>
          <Tab><HStack><UserIcon /><Text>–ü—Ä–æ—Ñ–∏–ª—å</Text></HStack></Tab>
          <Tab><HStack><BellIcon /><Text>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Text></HStack></Tab>
          <Tab><HStack><ThemeIcon /><Text>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</Text></HStack></Tab>
          <Tab><HStack><CodeIcon /><Text>–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</Text></HStack></Tab>
          <Tab><HStack><NetworkIcon /><Text>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</Text></HStack></Tab>
          <Tab><HStack><LockIcon /><Text>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</Text></HStack></Tab>
        </TabList>
        
        <TabPanels>
          {/* –ü–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è */}
          <TabPanel p={4}>
            <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
              <Card borderColor={borderColor} bg={cardBg}>
                <CardBody>
                  <Heading size="md" mb={4}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</Heading>
                  
                  <HStack spacing={4} mb={6}>
                    <Avatar size="xl" name={user?.username} src={user?.avatarUrl} />
                    <VStack align="start" spacing={1}>
                      <Text fontWeight="bold" fontSize="lg">{user?.firstName} {user?.lastName}</Text>
                      <Text color="gray.500">{user?.email}</Text>
                      <Badge colorScheme="purple">{user?.role}</Badge>
                    </VStack>
                    <IconButton 
                      aria-label="Edit profile" 
                      icon={<EditIcon />} 
                      variant="ghost" 
                      ml="auto"
                    />
                  </HStack>
                  
                  <SimpleGrid columns={2} spacing={4}>
                    <FormControl>
                      <FormLabel>–ò–º—è</FormLabel>
                      <Input defaultValue={user?.firstName || ''} />
                    </FormControl>
                    
                    <FormControl>
                      <FormLabel>–§–∞–º–∏–ª–∏—è</FormLabel>
                      <Input defaultValue={user?.lastName || ''} />
                    </FormControl>
                    
                    <FormControl>
                      <FormLabel>Email</FormLabel>
                      <Input defaultValue={user?.email || ''} />
                    </FormControl>
                    
                    <FormControl>
                      <FormLabel>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</FormLabel>
                      <Input defaultValue={user?.username || ''} isReadOnly />
                    </FormControl>
                  </SimpleGrid>
                </CardBody>
              </Card>
              
              <Card borderColor={borderColor} bg={cardBg}>
                <CardBody>
                  <Heading size="md" mb={4}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Heading>
                  
                  <VStack spacing={4} align="stretch">
                    <HStack justify="space-between">
                      <Text>–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á:</Text>
                      <Text fontWeight="bold">24</Text>
                    </HStack>
                    
                    <HStack justify="space-between">
                      <Text>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:</Text>
                      <Text fontWeight="bold">18</Text>
                    </HStack>
                    
                    <HStack justify="space-between">
                      <Text>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–¥–∞:</Text>
                      <Text fontWeight="bold">42 —Ñ–∞–π–ª–∞</Text>
                    </HStack>
                    
                    <HStack justify="space-between">
                      <Text>–ê–∫—Ç–∏–≤–Ω–æ —Å:</Text>
                      <Text fontWeight="bold">12.01.2023</Text>
                    </HStack>
                    
                    <Divider />
                    
                    <HStack justify="space-between">
                      <Text>–†–æ–ª—å:</Text>
                      <Badge colorScheme="purple">{user?.role}</Badge>
                    </HStack>
                    
                    <HStack justify="space-between">
                      <Text>–°—Ç–∞—Ç—É—Å:</Text>
                      <Badge colorScheme="green">–ê–∫—Ç–∏–≤–µ–Ω</Badge>
                    </HStack>
                  </VStack>
                </CardBody>
              </Card>
            </SimpleGrid>
          </TabPanel>
          
          {/* –ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
          <TabPanel p={4}>
            <Card borderColor={borderColor} bg={cardBg}>
              <CardBody>
                <Heading size="md" mb={4}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Heading>
                
                <VStack spacing={6} align="stretch">
                  <FormControl display="flex" alignItems="center">
                    <FormLabel htmlFor="notifications-toggle" mb="0">
                      –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    </FormLabel>
                    <Switch
                      id="notifications-toggle"
                      colorScheme="blue"
                      isChecked={userSettings.notificationsEnabled}
                      onChange={() => setUserSettings({
                        ...userSettings,
                        notificationsEnabled: !userSettings.notificationsEnabled
                      })}
                    />
                  </FormControl>
                  
                  <FormControl display="flex" alignItems="center">
                    <FormLabel htmlFor="email-notifications-toggle" mb="0">
                      –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ
                    </FormLabel>
                    <Switch
                      id="email-notifications-toggle"
                      colorScheme="blue"
                      isChecked={userSettings.emailNotifications}
                      isDisabled={!userSettings.notificationsEnabled}
                      onChange={() => setUserSettings({
                        ...userSettings,
                        emailNotifications: !userSettings.emailNotifications
                      })}
                    />
                  </FormControl>
                  
                  <Divider />
                  
                  <Heading size="sm">–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Heading>
                  
                  <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="task-created-toggle" mb="0">
                        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                      </FormLabel>
                      <Switch
                        id="task-created-toggle"
                        colorScheme="blue"
                        defaultChecked
                        isDisabled={!userSettings.notificationsEnabled}
                      />
                    </FormControl>
                    
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="task-completed-toggle" mb="0">
                        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                      </FormLabel>
                      <Switch
                        id="task-completed-toggle"
                        colorScheme="blue"
                        defaultChecked
                        isDisabled={!userSettings.notificationsEnabled}
                      />
                    </FormControl>
                    
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="code-generated-toggle" mb="0">
                        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
                      </FormLabel>
                      <Switch
                        id="code-generated-toggle"
                        colorScheme="blue"
                        defaultChecked
                        isDisabled={!userSettings.notificationsEnabled}
                      />
                    </FormControl>
                    
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="error-toggle" mb="0">
                        –û—à–∏–±–∫–∏
                      </FormLabel>
                      <Switch
                        id="error-toggle"
                        colorScheme="blue"
                        defaultChecked
                        isDisabled={!userSettings.notificationsEnabled}
                      />
                    </FormControl>
                  </SimpleGrid>
                </VStack>
              </CardBody>
            </Card>
          </TabPanel>
          
          {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */}
          <TabPanel p={4}>
            <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
              <Card borderColor={borderColor} bg={cardBg}>
                <CardBody>
                  <Heading size="md" mb={4}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã</Heading>
                  
                  <VStack spacing={6} align="stretch">
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="theme-toggle" mb="0">
                        –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
                      </FormLabel>
                      <Switch
                        id="theme-toggle"
                        colorScheme="blue"
                        isChecked={colorMode === 'dark'}
                        onChange={toggleColorMode}
                      />
                    </FormControl>
                    
                    <FormControl>
                      <FormLabel>–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞</FormLabel>
                      <Select defaultValue="blue">
                        <option value="blue">–°–∏–Ω—è—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)</option>
                        <option value="purple">–§–∏–æ–ª–µ—Ç–æ–≤–∞—è</option>
                        <option value="green">–ó–µ–ª–µ–Ω–∞—è</option>
                        <option value="red">–ö—Ä–∞—Å–Ω–∞—è</option>
                      </Select>
                      <FormHelperText>–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</FormHelperText>
                    </FormControl>
                    
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="animations-toggle" mb="0">
                        –ê–Ω–∏–º–∞—Ü–∏–∏
                      </FormLabel>
                      <Switch
                        id="animations-toggle"
                        colorScheme="blue"
                        defaultChecked
                      />
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>
              
              <Card borderColor={borderColor} bg={cardBg}>
                <CardBody>
                  <Heading size="md" mb={4}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</Heading>
                  
                  <VStack spacing={6} align="stretch">
                    <FormControl>
                      <FormLabel>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</FormLabel>
                      <Select 
                        value={userSettings.language}
                        onChange={(e) => setUserSettings({
                          ...userSettings,
                          language: e.target.value
                        })}
                      >
                        <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                        <option value="en">English</option>
                      </Select>
                    </FormControl>
                    
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="compact-mode-toggle" mb="0">
                        –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º
                      </FormLabel>
                      <Switch
                        id="compact-mode-toggle"
                        colorScheme="blue"
                        defaultChecked={false}
                      />
                    </FormControl>
                    
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="autosave-toggle" mb="0">
                        –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                      </FormLabel>
                      <Switch
                        id="autosave-toggle"
                        colorScheme="blue"
                        isChecked={userSettings.autoSaveEnabled}
                        onChange={() => setUserSettings({
                          ...userSettings,
                          autoSaveEnabled: !userSettings.autoSaveEnabled
                        })}
                      />
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>
            </SimpleGrid>
          </TabPanel>
          
          {/* –ü–∞–Ω–µ–ª—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ */}
          <TabPanel p={4}>
            <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
              <Card borderColor={borderColor} bg={cardBg}>
                <CardBody>
                  <Heading size="md" mb={4}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò-–º–æ–¥–µ–ª–∏</Heading>
                  
                  <VStack spacing={6} align="stretch">
                    <FormControl>
                      <FormLabel>–ú–æ–¥–µ–ª—å –ò–ò</FormLabel>
                      <Select 
                        value={userSettings.aiModel}
                        onChange={(e) => setUserSettings({
                          ...userSettings,
                          aiModel: e.target.value
                        })}
                      >
                        <option value="claude-3.5-sonnet">Claude 3.5 Sonnet</option>
                        <option value="claude-3-opus">Claude 3 Opus</option>
                        <option value="gpt-4o">GPT-4o</option>
                        <option value="llama-3-70b">Llama 3 70B</option>
                      </Select>
                      <FormHelperText>–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞</FormHelperText>
                    </FormControl>
                    
                    <FormControl>
                      <FormLabel>–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞</FormLabel>
                      <RadioGroup
                        value={userSettings.codeReviewLevel}
                        onChange={(value) => setUserSettings({
                          ...userSettings,
                          codeReviewLevel: value
                        })}
                      >
                        <Stack direction="column" spacing={2}>
                          <Radio value="minimal">
                            –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
                            <Text fontSize="xs" color="gray.500">–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞</Text>
                          </Radio>
                          <Radio value="balanced">
                            –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                            <Text fontSize="xs" color="gray.500">–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é</Text>
                          </Radio>
                          <Radio value="thorough">
                            –¢—â–∞—Ç–µ–ª—å–Ω—ã–π
                            <Text fontSize="xs" color="gray.500">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞</Text>
                          </Radio>
                        </Stack>
                      </RadioGroup>
                    </FormControl>
                    
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="limit-tokens-toggle" mb="0">
                        –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
                      </FormLabel>
                      <Switch
                        id="limit-tokens-toggle"
                        colorScheme="blue"
                        isChecked={isLimitTokens}
                        onChange={() => setIsLimitTokens(!isLimitTokens)}
                      />
                    </FormControl>
                    
                    <FormControl isDisabled={!isLimitTokens}>
                      <FormLabel htmlFor="max-tokens-slider" mb={2}>
                        –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å: {maxTokensPerRequest}
                      </FormLabel>
                      <Slider
                        id="max-tokens-slider"
                        value={maxTokensPerRequest}
                        min={1000}
                        max={16000}
                        step={1000}
                        onChange={setMaxTokensPerRequest}
                        onMouseEnter={() => setShowSliderValue(true)}
                        onMouseLeave={() => setShowSliderValue(false)}
                      >
                        <SliderTrack>
                          <SliderFilledTrack />
                        </SliderTrack>
                        <Tooltip
                          hasArrow
                          bg="blue.500"
                          color="white"
                          placement="top"
                          isOpen={showSliderValue}
                          label={`${maxTokensPerRequest}`}
                        >
                          <SliderThumb />
                        </Tooltip>
                      </Slider>
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>
              
              <Card borderColor={borderColor} bg={cardBg}>
                <CardBody>
                  <Heading size="md" mb={4}>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞</Heading>
                  
                  <VStack spacing={6} align="stretch">
                    <FormControl>
                      <FormLabel>–§—Ä–µ–π–º–≤–æ—Ä–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</FormLabel>
                      <Select defaultValue="react">
                        <option value="react">React</option>
                        <option value="angular">Angular</option>
                        <option value="vue">Vue</option>
                        <option value="svelte">Svelte</option>
                      </Select>
                    </FormControl>
                    
                    <FormControl>
                      <FormLabel>–°—Ç–∏–ª—å –∫–æ–¥–∞</FormLabel>
                      <Select defaultValue="functional">
                        <option value="functional">–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π</option>
                        <option value="oop">–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</option>
                        <option value="mixed">–°–º–µ—à–∞–Ω–Ω—ã–π</option>
                      </Select>
                    </FormControl>
                    
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="typescript-toggle" mb="0">
                        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TypeScript
                      </FormLabel>
                      <Switch
                        id="typescript-toggle"
                        colorScheme="blue"
                        defaultChecked
                      />
                    </FormControl>
                    
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="comments-toggle" mb="0">
                        –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                      </FormLabel>
                      <Switch
                        id="comments-toggle"
                        colorScheme="blue"
                        defaultChecked
                      />
                    </FormControl>
                    
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="tests-generation-toggle" mb="0">
                        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã
                      </FormLabel>
                      <Switch
                        id="tests-generation-toggle"
                        colorScheme="blue"
                        defaultChecked
                      />
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>
            </SimpleGrid>
          </TabPanel>
          
          {/* –ü–∞–Ω–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π */}
          <TabPanel p={4}>
            <Card borderColor={borderColor} bg={cardBg}>
              <CardBody>
                <Heading size="md" mb={4}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π</Heading>
                
                <VStack spacing={6} align="stretch">
                  <FormControl>
                    <FormLabel>–°—Ä–µ–¥–∞ API</FormLabel>
                    <Select 
                      value={environment}
                      onChange={handleEnvironmentChange}
                    >
                      <option value={Environment.LOCAL}>–õ–æ–∫–∞–ª—å–Ω–∞—è (http://localhost:3000/api)</option>
                      <option value={Environment.PRODUCTION}>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è (https://ai-assistant-back-zneh.onrender.com/api)</option>
                    </Select>
                    <FormHelperText>
                      –¢–µ–∫—É—â–∏–π API URL: <Code fontSize="sm">
                        {environment === Environment.LOCAL ? 'http://localhost:3000/api' : 'https://ai-assistant-back-zneh.onrender.com/api'}
                      </Code>
                    </FormHelperText>
                  </FormControl>
                  
                  <Divider />
                  
                  <Heading size="sm">–ö–ª—é—á–∏ API</Heading>
                  
                  <FormControl>
                    <FormLabel>–ö–ª—é—á API –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞</FormLabel>
                    <Input type="password" defaultValue="sk_‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" />
                    <FormHelperText>API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–∞–º –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞</FormHelperText>
                  </FormControl>
                  
                  <FormControl>
                    <FormLabel>URL —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π</FormLabel>
                    <Input defaultValue="https://github.com/organization/biz360-crm.git" />
                    <FormHelperText>URL –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π</FormHelperText>
                  </FormControl>
                  
                  <FormControl display="flex" alignItems="center">
                    <FormLabel htmlFor="auto-update-toggle" mb="0">
                      –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    </FormLabel>
                    <Switch
                      id="auto-update-toggle"
                      colorScheme="blue"
                      isChecked={systemSettings.autoUpdateEnabled}
                      onChange={() => setSystemSettings({
                        ...systemSettings,
                        autoUpdateEnabled: !systemSettings.autoUpdateEnabled
                      })}
                    />
                  </FormControl>
                  
                  <Button colorScheme="blue" alignSelf="flex-start" onClick={handleSaveSystemSettings}>
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                  </Button>
                </VStack>
              </CardBody>
            </Card>
          </TabPanel>
          
          {/* –ü–∞–Ω–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
          <TabPanel p={4}>
            <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
              <Card borderColor={borderColor} bg={cardBg}>
                <CardBody>
                  <Heading size="md" mb={4}>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞</Heading>
                  
                  <VStack spacing={6} align="stretch">
                    <FormControl>
                      <FormLabel>–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å</FormLabel>
                      <Input type="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" />
                    </FormControl>
                    
                    <FormControl>
                      <FormLabel>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</FormLabel>
                      <Input type="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" />
                      <FormHelperText>–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã</FormHelperText>
                    </FormControl>
                    
                    <FormControl>
                      <FormLabel>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</FormLabel>
                      <Input type="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" />
                    </FormControl>
                    
                    <Button colorScheme="blue">–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</Button>
                    
                    <Divider />
                    
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="2fa-toggle" mb="0">
                        –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                      </FormLabel>
                      <Switch
                        id="2fa-toggle"
                        colorScheme="blue"
                        defaultChecked={false}
                      />
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>
              
              <Card borderColor={borderColor} bg={cardBg}>
                <CardBody>
                  <Heading size="md" mb={4}>–ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</Heading>
                  
                  <VStack spacing={4} align="stretch">
                    <HStack borderBottomWidth="1px" borderBottomColor={borderColor} pb={2}>
                      <HistoryIcon />
                      <VStack align="start" spacing={0}>
                        <Text fontWeight="medium">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ</Text>
                        <Text fontSize="sm" color="gray.500">–°–µ–≥–æ–¥–Ω—è, 10:45</Text>
                      </VStack>
                      <Badge ml="auto" colorScheme="green">–£—Å–ø–µ—à–Ω–æ</Badge>
                    </HStack>
                    
                    <HStack borderBottomWidth="1px" borderBottomColor={borderColor} pb={2}>
                      <HistoryIcon />
                      <VStack align="start" spacing={0}>
                        <Text fontWeight="medium">–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è</Text>
                        <Text fontSize="sm" color="gray.500">–í—á–µ—Ä–∞, 14:23</Text>
                      </VStack>
                      <Badge ml="auto" colorScheme="blue">–ò–∑–º–µ–Ω–µ–Ω–∏–µ</Badge>
                    </HStack>
                    
                    <HStack borderBottomWidth="1px" borderBottomColor={borderColor} pb={2}>
                      <HistoryIcon />
                      <VStack align="start" spacing={0}>
                        <Text fontWeight="medium">–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞</Text>
                        <Text fontSize="sm" color="gray.500">23.04.2023, 09:12</Text>
                      </VStack>
                      <Badge ml="auto" colorScheme="red">–û—à–∏–±–∫–∞</Badge>
                    </HStack>
                    
                    <Button variant="outline" size="sm" alignSelf="flex-end">
                      –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
                    </Button>
                    
                    <Divider />
                    
                    <FormControl display="flex" alignItems="center">
                      <FormLabel htmlFor="activity-log-toggle" mb="0">
                        –í–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                      </FormLabel>
                      <Switch
                        id="activity-log-toggle"
                        colorScheme="blue"
                        defaultChecked
                      />
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>
            </SimpleGrid>
          </TabPanel>
        </TabPanels>
      </Tabs>
    </Box>
  );
};

export default SettingsPage;