// src/pages/tasks/TasksPage.tsx
import React, { useEffect, useState } from 'react';
import {
  Box,
  Heading,
  SimpleGrid,
  VStack,
  HStack,
  Text,
  Button,
  Select,
  Input,
  InputGroup,
  InputLeftElement,
  Flex,
  Checkbox,
  Badge,
  useColorModeValue,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  IconButton,
  Spinner,
  FormControl,
  FormLabel,
  Divider,
  Card,
  CardBody,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  Textarea
} from '@chakra-ui/react';
import { useNavigate } from 'react-router-dom';
import { useAppDispatch, useAppSelector } from '../../hooks/redux';
import { fetchTasks, createTask } from '../../store/slices/tasksSlice';
import { TaskFilterParams } from '../../types/api.types';
import { Task, TaskStatus, TaskPriority } from '../../types/task.types';
import TaskProgressCard from '../../components/task/TaskProgressCard';

// –ò–∫–æ–Ω–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ react-icons)
// –í —ç—Ç–æ–º —à–∞–±–ª–æ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
const SearchIcon = () => <span>üîç</span>;
const FilterIcon = () => <span>üîé</span>;
const AddIcon = () => <span>‚ûï</span>;
const SortIcon = () => <span>‚Üì‚Üë</span>;

const TasksPage: React.FC = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const { tasks, isLoading } = useAppSelector(state => state.tasks);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [filters, setFilters] = useState<TaskFilterParams>({
    page: 1,
    limit: 10,
    sortBy: 'updatedAt',
    sortOrder: 'desc'
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const [searchTerm, setSearchTerm] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const [statusFilter, setStatusFilter] = useState<string[]>([]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  const [priorityFilter, setPriorityFilter] = useState<string[]>([]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    priority: TaskPriority.MEDIUM,
    projectId: 1  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç
  });
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  const { isOpen, onOpen, onClose } = useDisclosure();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const [validationErrors, setValidationErrors] = useState({
    title: '',
    description: ''
  });
  
  // –¶–≤–µ—Ç–∞
  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.700');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    const queryParams: TaskFilterParams = { ...filters };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (searchTerm.trim()) {
      queryParams.search = searchTerm.trim();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Å—Ç–∞—Ç—É—Å—ã
    if (statusFilter.length > 0) {
      queryParams.status = statusFilter;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    if (priorityFilter.length > 0) {
      queryParams.priority = priorityFilter;
    }
    
    dispatch(fetchTasks(queryParams));
  }, [dispatch, filters, searchTerm, statusFilter, priorityFilter]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSortChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–µ –∏ –ø–æ—Ä—è–¥–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "updatedAt_desc")
    const [sortBy, sortOrder] = value.split('_');
    
    setFilters({
      ...filters,
      sortBy,
      sortOrder: sortOrder as 'asc' | 'desc',
      page: 1  // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const handleLimitChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilters({
      ...filters,
      limit: Number(e.target.value),
      page: 1  // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∏—Å–∫–∞
  const handleSearchSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ useEffect
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const handleStatusFilterChange = (status: string) => {
    if (statusFilter.includes(status)) {
      setStatusFilter(statusFilter.filter(item => item !== status));
    } else {
      setStatusFilter([...statusFilter, status]);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  const handlePriorityFilterChange = (priority: string) => {
    if (priorityFilter.includes(priority)) {
      setPriorityFilter(priorityFilter.filter(item => item !== priority));
    } else {
      setPriorityFilter([...priorityFilter, priority]);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleResetFilters = () => {
    setSearchTerm('');
    setStatusFilter([]);
    setPriorityFilter([]);
    setFilters({
      page: 1,
      limit: 10,
      sortBy: 'updatedAt',
      sortOrder: 'desc'
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const handleCreateTask = async () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = {
      title: '',
      description: ''
    };
    
    if (!newTask.title.trim()) {
      errors.title = '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    
    if (!newTask.description.trim()) {
      errors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    
    if (errors.title || errors.description) {
      setValidationErrors(errors);
      return;
    }
    
    try {
      const result = await dispatch(createTask(newTask)).unwrap();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      onClose();
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setNewTask({
        title: '',
        description: '',
        priority: TaskPriority.MEDIUM,
        projectId: 1
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      setValidationErrors({
        title: '',
        description: ''
      });
      
      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–µ—Ç–∞–ª—è–º–∏
      if (result?.id) {
        navigate(`/tasks/${result.id}`);
      }
    } catch (error) {
      console.error('Error creating task:', error);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    }
  };
  
  return (
    <Box>
      <Flex justifyContent="space-between" alignItems="center" mb={6}>
        <VStack align="flex-start" spacing={1}>
          <Heading size="lg">–ó–∞–¥–∞—á–∏</Heading>
          <Text color="gray.500">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞
          </Text>
        </VStack>
        
        <Button 
          leftIcon={<AddIcon />} 
          colorScheme="blue" 
          onClick={onOpen}
        >
          –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        </Button>
      </Flex>
      
      <Card borderColor={borderColor} boxShadow="sm" mb={6}>
        <CardBody>
          <Flex 
            direction={{ base: 'column', md: 'row' }} 
            justify="space-between" 
            align={{ base: 'stretch', md: 'center' }}
            gap={4}
          >
            <form onSubmit={handleSearchSubmit} style={{ flex: 1 }}>
              <InputGroup>
                <InputLeftElement pointerEvents="none">
                  <SearchIcon />
                </InputLeftElement>
                <Input 
                  placeholder="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á..." 
                  value={searchTerm}
                  onChange={handleSearchChange}
                />
              </InputGroup>
            </form>
            
            <HStack spacing={2}>
              <Menu closeOnSelect={false}>
                <MenuButton
                  as={IconButton}
                  aria-label="–§–∏–ª—å—Ç—Ä—ã"
                  icon={<FilterIcon />}
                  variant="outline"
                />
                <MenuList p={2} minWidth="240px">
                  <Text fontWeight="bold" mb={2}>–°—Ç–∞—Ç—É—Å</Text>
                  <VStack align="start" mb={3} spacing={1}>
                    <Checkbox
                      isChecked={statusFilter.includes(TaskStatus.NEW)}
                      onChange={() => handleStatusFilterChange(TaskStatus.NEW)}
                    >
                      –ù–æ–≤—ã–µ
                    </Checkbox>
                    <Checkbox
                      isChecked={statusFilter.includes(TaskStatus.IN_PROGRESS)}
                      onChange={() => handleStatusFilterChange(TaskStatus.IN_PROGRESS)}
                    >
                      –í –ø—Ä–æ—Ü–µ—Å—Å–µ
                    </Checkbox>
                    <Checkbox
                      isChecked={statusFilter.includes(TaskStatus.COMPLETED)}
                      onChange={() => handleStatusFilterChange(TaskStatus.COMPLETED)}
                    >
                      –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
                    </Checkbox>
                    <Checkbox
                      isChecked={statusFilter.includes(TaskStatus.FAILED)}
                      onChange={() => handleStatusFilterChange(TaskStatus.FAILED)}
                    >
                      –û—à–∏–±–∫–∏
                    </Checkbox>
                  </VStack>
                  
                  <Divider my={2} />
                  
                  <Text fontWeight="bold" mb={2}>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</Text>
                  <VStack align="start" mb={3} spacing={1}>
                    <Checkbox
                      isChecked={priorityFilter.includes(TaskPriority.LOW)}
                      onChange={() => handlePriorityFilterChange(TaskPriority.LOW)}
                    >
                      –ù–∏–∑–∫–∏–π
                    </Checkbox>
                    <Checkbox
                      isChecked={priorityFilter.includes(TaskPriority.MEDIUM)}
                      onChange={() => handlePriorityFilterChange(TaskPriority.MEDIUM)}
                    >
                      –°—Ä–µ–¥–Ω–∏–π
                    </Checkbox>
                    <Checkbox
                      isChecked={priorityFilter.includes(TaskPriority.HIGH)}
                      onChange={() => handlePriorityFilterChange(TaskPriority.HIGH)}
                    >
                      –í—ã—Å–æ–∫–∏–π
                    </Checkbox>
                    <Checkbox
                      isChecked={priorityFilter.includes(TaskPriority.CRITICAL)}
                      onChange={() => handlePriorityFilterChange(TaskPriority.CRITICAL)}
                    >
                      –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
                    </Checkbox>
                  </VStack>
                  
                  <Button 
                    size="sm" 
                    width="full" 
                    onClick={handleResetFilters}
                  >
                    –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
                  </Button>
                </MenuList>
              </Menu>
              
              <Select 
                width="auto" 
                size="md" 
                value={`${filters.sortBy}_${filters.sortOrder}`}
                onChange={handleSortChange}
              >
                <option value="updatedAt_desc">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</option>
                <option value="createdAt_desc">–ù–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏</option>
                <option value="createdAt_asc">–°—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏</option>
                <option value="priority_desc">–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å‚Üí–Ω–∏–∑–∫)</option>
                <option value="priority_asc">–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–Ω–∏–∑–∫‚Üí–≤—ã—Å)</option>
              </Select>
              
              <Select 
                width="auto" 
                size="md" 
                value={filters.limit.toString()}
                onChange={handleLimitChange}
              >
                <option value="5">5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option>
                <option value="10">10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option>
                <option value="20">20 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option>
                <option value="50">50 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option>
              </Select>
            </HStack>
          </Flex>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
          {(statusFilter.length > 0 || priorityFilter.length > 0 || searchTerm) && (
            <Flex wrap="wrap" gap={2} mt={4}>
              {searchTerm && (
                <Badge colorScheme="blue" borderRadius="full" px={2} py={1}>
                  –ü–æ–∏—Å–∫: {searchTerm}
                </Badge>
              )}
              
              {statusFilter.map(status => (
                <Badge key={status} colorScheme="purple" borderRadius="full" px={2} py={1}>
                  –°—Ç–∞—Ç—É—Å: {status}
                </Badge>
              ))}
              
              {priorityFilter.map(priority => (
                <Badge key={priority} colorScheme="orange" borderRadius="full" px={2} py={1}>
                  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}
                </Badge>
              ))}
              
              <Button 
                size="xs" 
                variant="ghost" 
                onClick={handleResetFilters}
              >
                –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ
              </Button>
            </Flex>
          )}
        </CardBody>
      </Card>
      
      {isLoading ? (
        <Flex justify="center" align="center" p={10}>
          <Spinner size="xl" />
        </Flex>
      ) : tasks.length > 0 ? (
        <SimpleGrid columns={{ base: 1, lg: 2 }} spacing={6}>
          {tasks.map(task => (
            <TaskProgressCard key={task.id} task={task} />
          ))}
        </SimpleGrid>
      ) : (
        <Box p={10} textAlign="center">
          <Text fontSize="lg" color="gray.500">
            –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </Text>
          <Text color="gray.500" mt={2}>
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
          </Text>
          <Button 
            mt={4} 
            colorScheme="blue" 
            leftIcon={<AddIcon />} 
            onClick={onOpen}
          >
            –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
          </Button>
        </Box>
      )}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ */}
      <Modal isOpen={isOpen} onClose={onClose} size="xl">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <VStack spacing={4}>
              <FormControl isRequired isInvalid={!!validationErrors.title}>
                <FormLabel>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</FormLabel>
                <Input 
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" 
                  value={newTask.title}
                  onChange={(e) => setNewTask({...newTask, title: e.target.value})}
                />
                {validationErrors.title && (
                  <Text color="red.500" fontSize="sm" mt={1}>
                    {validationErrors.title}
                  </Text>
                )}
              </FormControl>
              
              <FormControl isRequired isInvalid={!!validationErrors.description}>
                <FormLabel>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</FormLabel>
                <Textarea 
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É..." 
                  rows={5}
                  value={newTask.description}
                  onChange={(e) => setNewTask({...newTask, description: e.target.value})}
                />
                {validationErrors.description && (
                  <Text color="red.500" fontSize="sm" mt={1}>
                    {validationErrors.description}
                  </Text>
                )}
              </FormControl>
              
              <FormControl>
                <FormLabel>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</FormLabel>
                <Select 
                  value={newTask.priority}
                  onChange={(e) => setNewTask({...newTask, priority: e.target.value as TaskPriority})}
                >
                  <option value={TaskPriority.LOW}>–ù–∏–∑–∫–∏–π</option>
                  <option value={TaskPriority.MEDIUM}>–°—Ä–µ–¥–Ω–∏–π</option>
                  <option value={TaskPriority.HIGH}>–í—ã—Å–æ–∫–∏–π</option>
                  <option value={TaskPriority.CRITICAL}>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
                </Select>
              </FormControl>
              
              <FormControl>
                <FormLabel>–ü—Ä–æ–µ–∫—Ç</FormLabel>
                <Select 
                  value={newTask.projectId}
                  onChange={(e) => setNewTask({...newTask, projectId: Number(e.target.value)})}
                >
                  <option value={1}>Biz360 CRM</option>
                  {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ API */}
                </Select>
              </FormControl>
            </VStack>
          </ModalBody>
          
          <ModalFooter>
            <Button variant="ghost" mr={3} onClick={onClose}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button colorScheme="blue" onClick={handleCreateTask}>
              –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </Box>
  );
};

export default TasksPage;